(*open Base*)
(* open Stdlib *)
(* open Lexlib.Lexer *)
(* open Lexlib.Token *)
(* open Lexlib.Ast *)
(* open Lexlib.Parser *)

(* let rec lex_all lexer tokens = *)
(*   let lexer, token = next_token lexer in  *)
(*   match token with *)
(*   | None -> List.rev (EOF :: tokens) *)
(*   | Some token -> lex_all lexer (token :: tokens) *)
(* let lexer = init "int main() { return 42; }" *)
(* let tokens = lex_all lexer [] *)
(**)
(*  (*Print tokens for demonstration *) *)
(* let print_list = function *)
(*   | IDENT lex -> Format.printf ("IDENT(%s)\n") lex *)
(*   | KEYWORD lex -> Format.printf "KEYWORD(%s)\n" lex *)
(*   | INT_LITERAL value -> Format.printf "INT_LITERAL(%d)\n" value *)
(*   | BOOL_LITERAL boolean -> Format.printf "INT_LITERAL(%s)\n" (if boolean then "true" else "false") *)
(*   | OPERATOR lex -> Format.printf "OPERATOR(%s)\n" lex *)
(*   | DELIMITER lex -> Format.printf "DELIMITER(%s)\n" lex *)
(*   | EOF -> Format.printf "EOF\n" *)
(* let () =  *)
(*   List.iter print_list tokens *)
  (*List.iter tokens ~f:(print_list)*)
(* let parse_input input =  *)
(*     let lexer = init input in  *)
(*     let parser = init_parser lexer in  *)
(*     snd (parse_program parser) *)
(**)
(* let test_parse_integer () =  *)
(*     let result =  *)
(*         try  *)
(*             parse_input "4;"  *)
(*         with e ->  *)
(*             Format. *)
(*     match result with  *)
(*     | [ ExprStmt(Integer 5)] ->  *)
(*         Alcotest.(check pass) "Integer parsable" () () *)
(*     | _ -> Alcotest.fail "Failed to parse integer" *)
(**)
(* (* Test set *) *)
(* let test_set = [ *)
(*   "Parse integer", `Quick, test_parse_integer; *)
(*   (* "Parse infix expression", `Quick, test_parse_infix_expression; *) *)
(*   (* "Parse if expression", `Quick, test_parse_if_expression; *) *)
(*   (* "Parse function literal", `Quick, test_parse_function_literal; *) *)
(*   (* "Parse return statement", `Quick, test_parse_return_statement; *) *)
(* ] *)
(**)
(* (* Run the tests *) *)
(* let () = *)
(*     let open Alcotest in *)
(*     run "Parser Tests" [ *)
(*         "Parser tests", test_set; *)
(*     ] *)
